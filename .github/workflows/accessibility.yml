name: Accessibility Scan & Report to MongoDB

on:
  repository_dispatch:
    types: [trigger_pa11y_scan]
  push:
    branches:
      - main # Trigger on pushes to the main branch
  pull_request:
    branches:
      - main # Trigger on pull requests targeting the main branch
  schedule:
    - cron: '0 0 * * *' # Trigger daily at midnight UTC (e.g., for nightly scans)
  workflow_dispatch: # Allows manual triggering from the GitHub Actions tab
    inputs: # Define inputs for manual runs (also handles workflow_dispatch data if used)
      url:
        description: 'URL to scan for accessibility issues'
        required: true
        default: 'https://www.google.com' # Provide a default for manual runs

env:
  # The URL of your product/website that Pa11y will scan.
  # It now dynamically uses the URL from repository_dispatch (client_payload) or workflow_dispatch (inputs).
  # Fallback to a default if no URL is provided (e.g., from a push trigger).
  PALLY_URL_TO_SCAN: ${{ github.event.client_payload.url || github.event.inputs.url || 'https://www.google.com' }} # <--- DYNAMIC URL HERE

  # The webhook URL for your n8n workflow that will RECEIVE the Pa11y report (the 'ingestion' workflow).
  # IMPORTANT: Replace with your current, active ngrok URL or deployed n8n URL.
  N8N_WEBHOOK_URL_RECEIVE: "http://localhost:5678/webhook/receive-accessibility-report" # <--- VERIFY THIS IS YOUR LATEST NGROK URL

jobs:
  accessibility-scan:
    runs-on: ubuntu-latest # The type of virtual machine to run the job on

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Action to clone your repository code

      - name: Setup Node.js
        uses: actions/setup-node@v4 # Action to set up Node.js environment
        with:
          node-version: '18' # Specify Node.js version 18

      - name: Install Node.js dependencies
        run: |
          npm install # Installs dependencies from package.json (including pa11y)

      - name: Run Pa11y scan and save JSON
        id: run_pa11y # Assign an ID to this step to reference its outputs (if any)
        run: node pa11y-wrapper.js "${{ env.PALLY_URL_TO_SCAN }}" > pa11y-results.json # <--- USES THE DYNAMIC URL
        # Executes your Node.js wrapper, passing the dynamic target URL.
        # The JSON output from pa11y-wrapper.js is redirected to 'pa11y-results.json'.

      - name: Upload Pa11y raw JSON as artifact (optional)
        uses: actions/upload-artifact@v4 # Action to save artifacts from the workflow run
        with:
          name: pa11y-raw-json
          path: pa11y-results.json
          retention-days: 7 # How long to keep this artifact (for debugging/history)

      - name: Send Pa11y JSON report to n8n
        run: |
          curl -X POST \
          -H "Content-Type: application/json" \
          --data-binary @pa11y-results.json \
          "${{ env.N8N_WEBHOOK_URL_RECEIVE }}" # <--- USES THE DYNAMIC N8N RECEIVE URL
        # Uses curl to send the content of 'pa11y-results.json' as a POST request
        # with JSON content type to your n8n webhook URL.
        # The '@' prefix makes curl read the data from the file.
